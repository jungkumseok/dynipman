{
  "name": "Dynipman - Dynamic IP Manager",
  "tagline": "Personal IP address bookkeeping service for tracking your workstations",
  "body": "# DynamicIPManager - Private Dynamic IP Management\r\n\r\nThis is a Python3 (3.3 & 3.4 only) package containing a server and a client app\r\nfor managing your own list of workstations and their dynamic IPs.\r\n\r\n*There is absolutely no security other than a user-defined shared key between the server and the client*\r\n\r\n*Planning to add asymmetrical key system like that of openssh*\r\n\r\n\r\n##Usage Scenario\r\n\r\nI wrote this because I mainly work on my laptop which I carry around different places, but need to ssh into many different workstations that have dynamic IP addresses. Some of the workstations are located overseas and are not registered to a domain (mostly home computers), so when the local router receives a new IP from the ISP, I have no immediate access to the workstation. Rather than resorting to a dynamic DNS service, which would require obtaining additional domains, I thought it would be better to use one of my VPS (registered to a domain) as a \"yellow pages\" server for my remote workstations. My workstations would report to the VPS at regular interval, and the VPS will keep track of the IP addresses of the client workstations. When I need access to a new IP, I would access the VPS to read the new IP information.\r\n\r\n```\r\n\r\n+-----------------------------------------------------------------------------------------------------------+\r\n|                                                                                                           |\r\n|                                                                   +--------------------+                  |\r\n|             +---+          request: my name is \"workstation 1\"    |                    |                  |\r\n|   +---------+   | +---------------------------------------------> |                    |                  |\r\n|   |        ||   |                                                 |                    |                  |\r\n|   |        ||   | <---------------------------------------------+ | +----------------+ |                  |\r\n|   +---------+   |   response: cool, I'm writing down your new IP  | |                | |                  |\r\n|      +--+   +---+                                                 | +----------------+ |                  |\r\n|   workstation 1                                                   |   my hosted VPS    |                  |\r\n|     dynamic IP         +----------------------------------------> |    mydomain.com    |                  |\r\n|   xxx.xxx.xxx.xxx      |   (request sent at interval N secs)      |                    |                  |\r\n|                        |         +------------------------------> |                    |                  |\r\n|                        |         |                                |                    |                  |\r\n|                        |         |                                +-----------+--------+                  |\r\n|             +---+      |         |                                            |                           |\r\n|   +---------+   |      |         |                                         ^  |                           |\r\n|   |        ||   | <----+         |                         request:        |  |  response:                |\r\n|   |        ||   |                |                                 what is |  |    workstation 1's        |\r\n|   +---------+   |                |                         workstation 1's |  |    IP is now:             |\r\n|      +--+   +---+                v                         IP address now? |  |      xxx.xxx.xxx.xxx      |\r\n|   workstation 2                    +---+                                   |  v      updated at hh:mm:ss  |\r\n|     dynamic IP           +---------+   |                                   |                              |\r\n|   xxx.xxx.xxx.xxx        |        ||   |                              +----+-------+                      |\r\n|                          |        ||   |                              |            |                      |\r\n|                          +---------+   |                              |            |                      |\r\n|                             +--+   +---+                              |            |                      |\r\n|                          workstation 3                                +------------+                      |\r\n|                            dynamic IP                                +--------------+                     |\r\n|                          xxx.xxx.xxx.xxx                            +----------------+                    |\r\n|                                                                         my laptop                         |\r\n|                                                                       IP not important                    |\r\n+-----------------------------------------------------------------------------------------------------------+\r\n\r\n\r\n```\r\n\r\n## How to use\r\n\r\nThe packaged can be git cloned or downloaded from pypi via pip3.\r\n\r\n```\r\n~$ sudo pip3 install dynipman\r\n```\r\n\r\n### Installing on server\r\n```\r\n~$ sudo pip3 install dynipman\r\n~$ dynipman_sd\r\n```\r\n*dynipman_sd* is the server daemon script. This will start the server daemon. The following contents will be created the very first time the server daemon is run:\r\n```\r\n/var/lib/dynipman\r\n      /addressbook.json\r\n      /conf\r\n      /logs.txt\r\n```\r\n\r\nAfter the initial run, /var/lib/dynipman/conf should be edited for personal use.\r\nThe SHARED_KEY, SERVER, and CLIENT settings should be edited.\r\n*addressbook.json* is the json file containing all the IP addresses, and the name can be changed in *conf*.\r\nThe *conf* file should be copied and used in all the client workstations.\r\n\r\n\r\n### Installing on client\r\n```\r\n~$ sudo pip3 install dynipman\r\n~$ dynipman_cd\r\n```\r\n*dynipman_cd* is the client daemon script. The first time the client daemon is run, an error will likely be thrown (unless the server daemon was run on the same workstation before).\r\n```\r\n Connection Error!\r\n   check config at /var/lib/dynipman/conf\r\n   if the config is correct, then the server might be down.\r\n```\r\nPress Ctrl + C to interrupt the daemon, and then copy the *conf* file from the server (or edit the contents so that it is the same as the conf on server)\r\n\r\nNow running *dynipman_cd* should be successful:\r\n```\r\n~$ dynipman_cd\r\n2016-mm-dd HH:MM:SS\r\n{'result': 'success', 'data': 'Update saved successfully'}\r\n```\r\n\r\nThe \"yellow pages\" can be read by opening up a browser and typing:\r\n```\r\n   http://mydomain.com:7883/\r\n```\r\nThe page will display an html page (7883 is the default port number in *conf*)\r\nwhere you will be able to type in the code and then press enter to see the list of IPs\r\n\r\n\r\nIf you want, after setting up and confirming connection between server and client, you can register the scripts to be run in the background on startup to make sure these services are always running.\r\n\r\n## Dependencies and Requirements\r\n\r\n* Server workstation with a known domain\r\n* tornado (python package)\r\n\r\n\r\n## License\r\n\r\nMIT License",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}